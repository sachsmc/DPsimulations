lambda.T <- -1 + Y[i] * Z
S <- mu.S + matrix(rnorm(enns[i] * J), nrow = enns[i], ncol = J)
T <- rpois(enns[i], exp(lambda.T))
data.frame(Z, T, S)
}
analyze.indi.data <- function(test, i) {
t1 <- glm(T ~ Z, data = test, family = "poisson")
tbeta <- t1$coefficients[2]
tse <- sqrt(diag(vcov(t1)))[2]
ana.1X <- function(x) {
form <- as.formula(paste0("X", x, " ~ Z"))
s1 <- glm(form, data = test)
c(s1$coefficients[2], sqrt(diag(vcov(s1)))[2])
}
sests <- vapply(1:J, FUN = ana.1X, FUN.VALUE = rep(0, 2))
data.frame(trial = i, ests = c(tbeta, sests[1, ]), ses = c(tse, sests[2, ]), var = c("Y", paste0("X", 1:J)))
}
indi.results <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i), i)))
## estimate full model
y <- subset(indi.results, var == "Y")$ests
y.se <- subset(indi.results, var == "Y")$ses
x <- subset(indi.results, grepl("X", var))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred <- as.matrix(x.est)
x <- x.est
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=.1,
b0=.1,
nu1=.2,
nu2=.2,
s2=5*wcov,
m2=wbar,
psiinv2=5*solve(wcov),
tau1=.1,
tau2=.1)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
dim(xpred)
wcov
diag(var(w))
diag(diag(var(w)))
x <- x.est
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- diag(diag(var(w)))
prior <- list(a0=.1,
b0=.1,
nu1=.2,
nu2=.2,
s2=5*wcov,
m2=wbar,
psiinv2=5*solve(wcov),
tau1=.1,
tau2=.1)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
wcov
solve(wcov)
J <- 3
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- diag(diag(var(w)))
prior <- list(a0=.1,
b0=.1,
nu1=.2,
nu2=.2,
s2=5*wcov,
m2=wbar,
psiinv2=5*solve(wcov),
tau1=.1,
tau2=.1)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
J <- 2
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- diag(diag(var(w)))
prior <- list(a0=.1,
b0=.1,
nu1=.2,
nu2=.2,
s2=5*wcov,
m2=wbar,
psiinv2=5*solve(wcov),
tau1=.1,
tau2=.1)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
J <- 2
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0 = 10,
b0 = 1,
nu1 = 4,
nu2 = 4,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
J
J <- 3
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0 = 10,
b0 = 1,
nu1 = 4,
nu2 = 4,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
J <- 4
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0 = 10,
b0 = 1,
nu1 = 4,
nu2 = 4,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
prior <- list(a0 = 100,
b0 = 1,
nu1 = 4,
nu2 = 4,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
prior <- list(a0 = 10,
b0 = 1,
nu1 = 40,
nu2 = 40,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
J <- 6
x <- matrix(rnorm(50 * J), ncol= J)
y <- rnorm(50)
# Prior information
w <- cbind(y,x)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0 = 10,
b0 = 1,
nu1 = 40,
nu2 = 40,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
plot(fit)
J
prior <- list(a0 = 10,
b0 = 1,
nu1 = 20,
nu2 = 20,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
prior <- list(a0 = 10,
b0 = 1,
nu1 = 10,
nu2 = 10,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
# fitting the model
xpred <- matrix(rep(seq(-1, 1, by = .1), J), ncol = J)
fit <- DPcdensity(y=y,x=x,xpred=xpred,ngrid=10,
prior=prior,
mcmc=mcmc,
state=state,
status=TRUE,
compute.band=FALSE,type.band="PD")
source('C:/Users/micsac/Desktop/DPsimulations-master/utils.R')
library(DPpackagemod)
n <- 20
freq <- TRUE
J <- 6
X <- matrix(rnorm(n * J, sd = 1), nrow = n, ncol = J)
Y <-  2 + .25 * X[, 1] + .25 * rt(nrow(X), df = 15)
if(J > 3) {
Y <-  2 + .125 * X[, 1] + .125 * X[, 2] + .125 * X[, 3] + .25 * rt(nrow(X), df = 15)
}
enns <- sample(ceiling(runif(n, 100, 500)))
samp.indi.data <- function(i) {
Z <- rbinom(enns[i], 1, .5)
mu.S <- vapply(X[i, ], function(x) 2.5 + x * Z, FUN.VALUE = rep(0, length(Z)))
lambda.T <- -1 + Y[i] * Z
S <- mu.S + matrix(rnorm(enns[i] * J), nrow = enns[i], ncol = J)
T <- rpois(enns[i], exp(lambda.T))
data.frame(Z, T, S)
}
analyze.indi.data <- function(test, i) {
t1 <- glm(T ~ Z, data = test, family = "poisson")
tbeta <- t1$coefficients[2]
tse <- sqrt(diag(vcov(t1)))[2]
ana.1X <- function(x) {
form <- as.formula(paste0("X", x, " ~ Z"))
s1 <- glm(form, data = test)
c(s1$coefficients[2], sqrt(diag(vcov(s1)))[2])
}
sests <- vapply(1:J, FUN = ana.1X, FUN.VALUE = rep(0, 2))
data.frame(trial = i, ests = c(tbeta, sests[1, ]), ses = c(tse, sests[2, ]), var = c("Y", paste0("X", 1:J)))
}
indi.results <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i), i)))
## estimate full model
y <- subset(indi.results, var == "Y")$ests
y.se <- subset(indi.results, var == "Y")$ses
x <- subset(indi.results, grepl("X", var))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred <- as.matrix(x.est)
test <- sample_from_model(y, x.est, y.se, x.ses, xpred)
source('C:/Users/micsac/Desktop/DPsimulations-master/scratch.R')
source('C:/Users/micsac/Desktop/DPsimulations-master/utils.R')
test <- sample_from_model(y, x.est, y.se, x.ses, xpred)
head(test)
by(test$trial, test$t.hat.post, mean)
by(test$t.hat.post, test$trial, mean)
plot(by(test$t.hat.post, test$trial, mean) ~ y)
abline(0, 1)
indi.results
trials <- indi.results
xvars <- c("X1", "X2", "X3")
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
j <- 1
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
y
subset(trials, var == "Y" & trial != j)
subset(trials, var %in% xvars & trial != j)
reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")
j <- 13
subset(trials, var == "Y" & trial != j)
x <- subset(trials, var %in% xvars & trial != j)
reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred <- subset(trials, var %in% xvars & trial == j)
xpred
as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predict_from_model(y, x.est, y.se, x.se, xpred)
predict_from_model(y, x.est, y.se, x.ses, xpred)
cbind(trial = j, predict_from_model(y, x.est, y.se, x.ses, xpred))
predictions <- matrix(NA, nrow = 2 + length(xvars), ncol = nrow(trials))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predictions[j, ] <- cbind(trial.leftout = j, predict_from_model(y, x.est, y.se, x.ses, xpred))
}
predictions
predictions <- matrix(NA, nrow = 2 + length(xvars), ncol = nrow(trials))
predictions
predictions <- matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials)))
predictions
predictions <- matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial)))
predictions
predictions <- matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial)))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predictions[j, ] <- cbind(trial.leftout = j, predict_from_model(y, x.est, y.se, x.ses, xpred))
}
j
predictions
predict_from_model(y, x.est, y.se, x.ses, xpred)
predictions <- as.data.frame(matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial))))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predictions[j, ] <- cbind(trial.leftout = j, predict_from_model(y, x.est, y.se, x.ses, xpred))
}
predictions
predictions <- as.data.frame(matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial))))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predfit <- predict_from_model(y, x.est, y.se, x.ses, xpred)
predictions[j, ] <- cbind(trial.leftout = j, predfit)
}
colnames(predictions) <- c("trial.leftout", colnames(predfit))
predictions
y <- subset(indi.results, var == "Y")$ests
lines(predictions$yhat ~ y, type = "p", pch = 20)
source('C:/Users/micsac/Desktop/DPsimulations-master/scratch.R')
n = 20
