compareto$absdiff <- with(compareto, abs(t.hat.post - yhat))
D.ests[i] <- mean(compareto$absdiff)
D.true[i] <- mean(abs(y - pred.ins$yhat))
i <- 1
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, Y.full.sample, by.x = "trial.leftout", by.y = "trial")
compareto$absdiff <- with(compareto, abs(t.hat.post - yhat))
D.ests[i] <- mean(compareto$absdiff)
D.true[i] <- mean(abs(y - pred.ins$yhat))
leave_one_out(trials, "")
x.est
trials
trials.0 <- rbind(subset(trials, var == "Y"),
data.frame(trial = 1:n, ests = 1, ses = 0, var = "X0"))
trials.0
leave_one_out(trials.0, "X0")
trials.0 <- rbind(subset(trials, var == "Y"),
data.frame(trial = 1:n, ests = 1, ses = 0.01, var = "X0"))
leave_one_out(trials.0, "X0")
pred.ins
subset(trials, var == "Y")
y.bar <- mean(y / y.se)
y.bar
y.bar <- rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000))
y.bar <- mean(rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000)))
y.bar
mean(y)
pred_null <- function(trials) {
prediction <- NULL
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
y.bar <- mean(rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000)))
prediction <- rbind(prediction, data.frame(trial = j, yhat = y.bar))
}
prediction
}
pred.0 <- pred_null(trials)
pred.0
plot(pred.0$yhat ~ y)
abline(0, 1)
plot(pred.0$yhat , y)
abline(0, 1)
pred_null <- function(trials) {
prediction <- NULL
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
y.bar <- mean(rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000)))
prediction <- rbind(prediction, data.frame(trial = j, yhat.0 = y.bar))
}
prediction
}
pred.0 <- pred_null(trials)
compareto
head(compareto)
compareto <- merge(compareto, pred.0, by.x = "trial.leftout", by.y = "trial")
head(compareto)
compareto$absdiff.0 <- with(compareto, abs(t.hat.post - yhat.0))
head(comparet0)
head(compareto)
with(compareto, absdiff < absdiff.0)
mean(with(compareto, absdiff < absdiff.0))
plot(absdiff ~ absdiff.0)
plot(absdiff ~ absdiff.0, data = compareto)
abline(0, 1, col = "red")
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
for(i in 1:length(varsets)) {
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, Y.full.sample, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto$absdiff <- with(compareto, abs(t.hat.post - yhat))
compareto$absdiff.0 <- with(compareto, abs(t.hat.post - yhat.0))
P.D0[i] <- mean(with(compareto, absdiff < absdiff.0))
D.ests[i] <- mean(compareto$absdiff)
D.true[i] <- mean(abs(y - pred.ins$yhat))
cat(i, "\n")
}
i
D.ests
P.D0
hist(P.D0)
btr.than.0 <- P.D0 < 0.5
!any(btr.than.0)
compareto$absdiff.0
mean(compareto$absdiff.0)
mean(abs(y - pred.0$yhat.0))
c(D.est = mean(compareto$absdiff.0), D.true = mean(abs(y - pred.0$yhat.0)), model.sel = "Null")
data.frame(D.est = mean(compareto$absdiff.0), D.true = mean(abs(y - pred.0$yhat.0)), model.sel = "Null")
data.frame(Scenario = scenario,
D.est = mean(compareto$absdiff.0),
D.true = mean(abs(y - pred.0$yhat.0)),
model.sel = "Null")
kp <- D.ests[btr.than.0]
kp.true <- D.true[btr.than.0]
D.ests[btr.than.0]
which.min(kp)
kp[mydex]
mydex <- which.min(kp)
kp[mydex]
data.frame(Scenario = scenario,
D.est = kp[mydex],
D.true = kp.true[mydex],
model.sel = var.groups[btr.than.0][mydex])
list.files()
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/scratch.R')
?write.table
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/utils.R')
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/utils.R')
library(DPpackagemod)
library(splines)
get_prior <- function(w, j) {
wbar <- apply(w, 2, mean)
wcov <- var(w)
list(a0 = 10,
b0 = 1,
nu1 = 3 + 1.5 * j,
nu2 = 3 + 1.5 * j,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
}
sample_from_density <- function(n, x, y) {
sample(x, size = n, prob = y, replace = TRUE)
}
all_sets_formula <- function(vars) {
all.sets <- NULL
for(i in 1:length(vars)) {
all.sets <-  c(all.sets, combn(vars, i, FUN = function(x) c(x), simplify = FALSE))
}
all.sets
}
sample_from_model <- function(y, x1, y.se, x1.se, xpred, ...) {
ses <- cbind(y.se, x1.se)
w <- cbind(y, x1)
prior <- get_prior(w, ncol(x1))
mcmc <- list(nburn=5000,
nsave=1000,
nskip=2,
ndisplay=1e6)
mygrid <- seq(min(y) - 2 * sd(y), max(y) + 2 * sd(y), length.out = 500)
fitLDDP <- DPcdensity(y = y, x = x1, mus=w, sds=ses, xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
y.hat.samps <- lapply(1:length(y), function(i){
data.frame(trial = i, t.hat.post = sample_from_density(100, fitLDDP$grid, fitLDDP$densp.m[i, ]))
})
do.call(rbind, y.hat.samps)
}
predict_from_model <- function(y, x1, y.se, x1.se, xpred, ...) {
ses <- cbind(y.se, x1.se)
w <- cbind(y, x1)
prior <- get_prior(w, ncol(x1))
mcmc <- list(nburn=5000,
nsave=1000,
nskip=2,
ndisplay=1e6)
fitLDDP <- DPcdensity(y = y, x = x1, mus=w, sds=ses, xpred = xpred,
ngrid=1,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
data.frame(xpred = xpred, yhat = fitLDDP$meanfp.m)
}
leave_one_out <- function(trials, xvars) {
predictions <- as.data.frame(matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial))))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predfit <- predict_from_model(y, x.est, y.se, x.ses, xpred)
predictions[j, ] <- cbind(trial.leftout = j, predfit)
}
colnames(predictions) <- c("trial.leftout", colnames(predfit))
predictions
}
pred_null <- function(trials) {
prediction <- NULL
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
y.bar <- mean(rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000)))
prediction <- rbind(prediction, data.frame(trial = j, yhat.0 = y.bar))
}
prediction
}
gen_effects <- function(scenario, n = 20) {
J <- 6
X <- matrix(rnorm(n * J, sd = 1), nrow = n, ncol = J)
err <- rep(0, n) #025 * rt(nrow(X), df = 15)
if(scenario == "0") {
Y <- 1.5 + rnorm(n, sd = 1.2)
} else if(scenario == "A") {
Y <- 1.5 + 1 * X[, 1] + err
} else if(scenario == "B") {
X.star <- cbind(bs(X[, 1], knots = c(0), degree = 1), X[, -1])
beta <- c(-1.75, .1, 0, 0, 0, 0, 0)
Y <-  1 - X.star %*% beta + err
} else if(scenario == "C") {
Y <- 3.5 - (X[, 1] - 1) * (X[, 1] - .5) + err
} else if(scenario == "D") {  ## multivariate
beta <- c(.25, .25, .5, 0, 0, 0)
Y <- 1.5 + X %*% beta + err
} else if(scenario == "E") { ## multivariate
X.star <- cbind(bs(X[, 1], knots = c(-.25, .25)),
bs(X[, 2], knots = c(-.5, .25)),
bs(X[, 3], knots = c(-.25, .5)),
X[, 4:6])
beta <- c(rep(c(.5, .25, .5, -.2, .75), 3), 0, 0, 0)
Y <- .75 + X.star %*% beta + err
} else stop("No scenario")
list(Y = Y, X = X)
}
samp.indi.data <- function(i, effects) {
enns <- sample(ceiling(runif(n, 100, 500)))
Y <- effects$Y
X <- effects$X
J <- ncol(X)
Z <- rbinom(enns[i], 1, .5)
mu.S <- vapply(X[i, ], function(x) 2.5 + x * Z, FUN.VALUE = rep(0, length(Z)))
lambda.T <- -1 + Y[i] * Z
S <- mu.S + matrix(rnorm(enns[i] * J), nrow = enns[i], ncol = J)
T <- rpois(enns[i], exp(lambda.T))
data.frame(Z, T, S)
}
analyze.indi.data <- function(test, i) {
t1 <- glm(T ~ Z, data = test, family = "poisson")
tbeta <- t1$coefficients[2]
tse <- sqrt(diag(vcov(t1)))[2]
ana.1X <- function(x) {
form <- as.formula(paste0("X", x, " ~ Z"))
s1 <- glm(form, data = test)
c(s1$coefficients[2], sqrt(diag(vcov(s1)))[2])
}
J <- ncol(test) - 2
sests <- vapply(1:J, FUN = ana.1X, FUN.VALUE = rep(0, 2))
data.frame(trial = i, ests = c(tbeta, sests[1, ]), ses = c(tse, sests[2, ]), var = c("Y", paste0("X", 1:J)))
}
run_one_rep <- function(scenario, n = 20, output, seed) {
set.seed(seed)
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff), i)))
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_model(y, x.est, y.se, x.ses, x.est)
## compute D0
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
for(i in 1:length(varsets)) {
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, Y.full.sample, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto$absdiff <- with(compareto, abs(t.hat.post - yhat))
compareto$absdiff.0 <- with(compareto, abs(t.hat.post - yhat.0))
P.D0[i] <- mean(with(compareto, absdiff < absdiff.0))
D.ests[i] <- mean(compareto$absdiff)
D.true[i] <- mean(abs(y - pred.ins$yhat))
}
btr.than.0 <- P.D0 < 0.5
if(!any(btr.than.0)) {
outdat <- data.frame(Scenario = scenario,
D.est = mean(compareto$absdiff.0),
D.true = mean(abs(y - pred.0$yhat.0)),
model.sel = "Null")
} else {
kp <- D.ests[btr.than.0]
kp.true <- D.true[btr.than.0]
mydex <- which.min(kp)
outdat <- data.frame(Scenario = scenario,
D.est = kp[mydex],
D.true = kp.true[mydex],
model.sel = var.groups[btr.than.0][mydex])
}
write.table(outdat, file = output, row.names = FALSE)
}
run_one_rep <- function(scenario, n = 20, output, seed) {
set.seed(seed)
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff), i)))
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_model(y, x.est, y.se, x.ses, x.est)
## compute D0
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)[1:4]
D.ests <- rep(NA, length(varsets))
D.true <- rep(NA, length(varsets))
P.D0 <- rep(NA, length(varsets))
var.groups <- sapply(varsets, paste, collapse = "|")
for(i in 1:length(varsets)) {
pred.ins <- leave_one_out(trials, varsets[[i]])
compareto <- merge(pred.ins, Y.full.sample, by.x = "trial.leftout", by.y = "trial")
compareto <- merge(compareto, pred.0, by.x = "trial.leftout", by.y = "trial")
compareto$absdiff <- with(compareto, abs(t.hat.post - yhat))
compareto$absdiff.0 <- with(compareto, abs(t.hat.post - yhat.0))
P.D0[i] <- mean(with(compareto, absdiff < absdiff.0))
D.ests[i] <- mean(compareto$absdiff)
D.true[i] <- mean(abs(y - pred.ins$yhat))
}
btr.than.0 <- P.D0 < 0.5
if(!any(btr.than.0)) {
outdat <- data.frame(Scenario = scenario,
D.est = mean(compareto$absdiff.0),
D.true = mean(abs(y - pred.0$yhat.0)),
model.sel = "Null")
} else {
kp <- D.ests[btr.than.0]
kp.true <- D.true[btr.than.0]
mydex <- which.min(kp)
outdat <- data.frame(Scenario = scenario,
D.est = kp[mydex],
D.true = kp.true[mydex],
model.sel = var.groups[btr.than.0][mydex])
}
write.table(outdat, file = output, row.names = FALSE)
}
run_one_rep("A", 20, "test.txt", 1345)
source('G:/STAFF/Michael Sachs/Stats Projects/Bayesian NP Meta Analysis/Simulation Code/test-code.R')
run_one_rep("A", 20, "test.txt", 1345)
read.table("test.txt")
read.table("test.txt", header = TRUE)
?write.csv
library(DPpackagemod)
library(splines)
get_prior <- function(w, j) {
wbar <- apply(w, 2, mean)
wcov <- var(w)
list(a0 = 10,
b0 = 1,
nu1 = 3 + 1.5 * j,
nu2 = 3 + 1.5 * j,
s2 = 0.5 * wcov,
m2 = wbar,
psiinv2 = 2 * solve(wcov),
tau1 = 6.01, tau2 = 3.01)
}
sample_from_density <- function(n, x, y) {
sample(x, size = n, prob = y, replace = TRUE)
}
all_sets_formula <- function(vars) {
all.sets <- NULL
for(i in 1:length(vars)) {
all.sets <-  c(all.sets, combn(vars, i, FUN = function(x) c(x), simplify = FALSE))
}
all.sets
}
sample_from_model <- function(y, x1, y.se, x1.se, xpred, ...) {
ses <- cbind(y.se, x1.se)
w <- cbind(y, x1)
prior <- get_prior(w, ncol(x1))
mcmc <- list(nburn=5000,
nsave=1000,
nskip=2,
ndisplay=1e6)
mygrid <- seq(min(y) - 2 * sd(y), max(y) + 2 * sd(y), length.out = 500)
fitLDDP <- DPcdensity(y = y, x = x1, mus=w, sds=ses, xpred = xpred,
grid=mygrid,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
y.hat.samps <- lapply(1:length(y), function(i){
data.frame(trial = i, t.hat.post = sample_from_density(100, fitLDDP$grid, fitLDDP$densp.m[i, ]))
})
do.call(rbind, y.hat.samps)
}
predict_from_model <- function(y, x1, y.se, x1.se, xpred, ...) {
ses <- cbind(y.se, x1.se)
w <- cbind(y, x1)
prior <- get_prior(w, ncol(x1))
mcmc <- list(nburn=5000,
nsave=1000,
nskip=2,
ndisplay=1e6)
fitLDDP <- DPcdensity(y = y, x = x1, mus=w, sds=ses, xpred = xpred,
ngrid=1,
compute.band=FALSE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
data.frame(xpred = xpred, yhat = fitLDDP$meanfp.m)
}
leave_one_out <- function(trials, xvars) {
predictions <- as.data.frame(matrix(NA, ncol = 2 + length(xvars), nrow = length(unique(trials$trial))))
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
x <- subset(trials, var %in% xvars & trial != j)
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
xpred.x <- subset(trials, var %in% xvars & trial == j)
xpred <- as.matrix(reshape(xpred.x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
predfit <- predict_from_model(y, x.est, y.se, x.ses, xpred)
predictions[j, ] <- cbind(trial.leftout = j, predfit)
}
colnames(predictions) <- c("trial.leftout", colnames(predfit))
predictions
}
pred_null <- function(trials) {
prediction <- NULL
for(j in unique(trials$trial)) {
y <- subset(trials, var == "Y" & trial != j)$ests
y.se <- subset(trials, var == "Y" & trial != j)$ses
y.bar <- mean(rnorm(length(y) * 1000, mean = rep(y, 1000), sd = rep(y.se, 1000)))
prediction <- rbind(prediction, data.frame(trial = j, yhat.0 = y.bar))
}
prediction
}
gen_effects <- function(scenario, n = 20) {
J <- 6
X <- matrix(rnorm(n * J, sd = 1), nrow = n, ncol = J)
err <- rep(0, n) #025 * rt(nrow(X), df = 15)
if(scenario == "0") {
Y <- 1.5 + rnorm(n, sd = 1.2)
} else if(scenario == "A") {
Y <- 1.5 + 1 * X[, 1] + err
} else if(scenario == "B") {
X.star <- cbind(bs(X[, 1], knots = c(0), degree = 1), X[, -1])
beta <- c(-1.75, .1, 0, 0, 0, 0, 0)
Y <-  1 - X.star %*% beta + err
} else if(scenario == "C") {
Y <- 3.5 - (X[, 1] - 1) * (X[, 1] - .5) + err
} else if(scenario == "D") {  ## multivariate
beta <- c(.25, .25, .5, 0, 0, 0)
Y <- 1.5 + X %*% beta + err
} else if(scenario == "E") { ## multivariate
X.star <- cbind(bs(X[, 1], knots = c(-.25, .25)),
bs(X[, 2], knots = c(-.5, .25)),
bs(X[, 3], knots = c(-.25, .5)),
X[, 4:6])
beta <- c(rep(c(.5, .25, .5, -.2, .75), 3), 0, 0, 0)
Y <- .75 + X.star %*% beta + err
} else stop("No scenario")
list(Y = Y, X = X)
}
samp.indi.data <- function(i, effects, enns) {
Y <- effects$Y
X <- effects$X
J <- ncol(X)
Z <- rbinom(enns[i], 1, .5)
mu.S <- vapply(X[i, ], function(x) 2.5 + x * Z, FUN.VALUE = rep(0, length(Z)))
lambda.T <- -1 + Y[i] * Z
S <- mu.S + matrix(rnorm(enns[i] * J), nrow = enns[i], ncol = J)
T <- rpois(enns[i], exp(lambda.T))
data.frame(Z, T, S)
}
analyze.indi.data <- function(test, i) {
t1 <- glm(T ~ Z, data = test, family = "poisson")
tbeta <- t1$coefficients[2]
tse <- sqrt(diag(vcov(t1)))[2]
ana.1X <- function(x) {
form <- as.formula(paste0("X", x, " ~ Z"))
s1 <- glm(form, data = test)
c(s1$coefficients[2], sqrt(diag(vcov(s1)))[2])
}
J <- ncol(test) - 2
sests <- vapply(1:J, FUN = ana.1X, FUN.VALUE = rep(0, 2))
data.frame(trial = i, ests = c(tbeta, sests[1, ]), ses = c(tse, sests[2, ]), var = c("Y", paste0("X", 1:J)))
}
scenario <- "A"
n <- 20
enns <- sample(ceiling(runif(n, 100, 500)))
eff <- gen_effects(scenario, n)
trials <- do.call(rbind, lapply(1:n, function(i) analyze.indi.data(samp.indi.data(i, eff, enns), i)))
y <- subset(trials, var == "Y")$ests
y.se <- subset(trials, var == "Y")$ses
x <- subset(trials, grepl("^X", var))
xvars <- as.character(sort(unique(x$var)))
x.est <- as.matrix(reshape(x, direction = "wide", drop = "ses", v.names = "ests", timevar = "var", idvar = "trial")[, -1])
x.ses <- as.matrix(reshape(x, direction = "wide", drop = "ests", v.names = "ses", timevar = "var", idvar = "trial")[, -1])
Y.full.sample <- sample_from_model(y, x.est, y.se, x.ses, x.est)
## compute D0
pred.0 <- pred_null(trials)
varsets <- all_sets_formula(xvars)
length(varsets)
63 * 225
63 * 225 / (60^2)
write.table(round(10000 * runif(1000), 0), file = "seedfile.txt", row.names = FALSE, col.names = FALSE)
